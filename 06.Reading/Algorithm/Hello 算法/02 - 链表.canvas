{
	"nodes":[
		{"id":"7b7cea0e074e4f5e","type":"group","x":-1480,"y":-540,"width":720,"height":951,"color":"4","label":"应用场景"},
		{"id":"a1c276a2ef4de9b1","type":"group","x":-180,"y":-130,"width":690,"height":700,"color":"5","label":"主要操作"},
		{"id":"3f666a58c13c48e3","type":"group","x":-620,"y":220,"width":290,"height":824,"color":"2","label":"链表类型"},
		{"id":"c35268b6efad58e2","type":"text","text":"“链表(linked list)是一种线性数据结构,其中的每个元素都是一个节点对象,各个节点通过“引用”相连接。引用记录了下一个节点的内存地址,通过它可以从当前节点访问到下一个节点。” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=79&annotation=32DKUYB8))\n#DataStructure ","x":-600,"y":-214,"width":250,"height":300,"color":"6"},
		{"id":"5e394bfe81488f06","type":"text","text":"“环形链表:如果我们令单向链表的尾节点指向头节点(首尾相接),则得到一个环形链表。在环形链表 中,任意节点都可以视作头节点。” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=84&annotation=2VBRJBSB))","x":-600,"y":481,"width":250,"height":238},
		{"id":"eaaa8eb46b29f245","type":"text","text":"“双向链表:与单向链表相比,双向链表记录了两个方向的引用。双向链表的节点定义同时包含指向后继 节点(下一个节点)和前驱节点(上一个节点)的引用(指针)。” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=84&annotation=WRCG56SY))","x":-600,"y":761,"width":250,"height":263},
		{"id":"55f22afe4a809d76","type":"text","text":"“单向链表的节点包含值和指向下一节点的引用两项数据。我们将首 个节点称为头节点,将最后一个节点称为尾节点,尾节点指向空 None 。” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=84&annotation=9PLW9U69))","x":-600,"y":240,"width":250,"height":220},
		{"id":"4bb5be455746b747","type":"text","text":"“双向链表常用于需要快速查找前一个和后一个元素的场景” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=85&annotation=4EIX8CDT))\n- 高级数据结构:比如在红黑树、B 树中,我们需要访问节点的父节点,这可以通过在节点中保存一个指 向父节点的引用来实现,类似于双向链表。\n- 浏览器历史:在网页浏览器中,当用户点击前进或后退按钮时,浏览器需要知道用户访问过的前一个和 后一个网页。双向链表的特性使得这种操作变得简单。\n- LRU 算法:在缓存淘汰(LRU)算法中,我们需要快速找到最近最少使用的数据,以及支持快速添加 和删除节点。这时候使用双向链表就非常合适。","x":-1460,"y":-200,"width":680,"height":289},
		{"id":"b9980b0031424632","type":"text","text":"“环形链表常用于需要周期性操作的场景,比如操作系统的资源调度。” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=85&annotation=8EC2RWC5))\n- 时间片轮转调度算法:在操作系统中,时间片轮转调度算法是一种常见的 CPU 调度算法,它需要对一 组进程进行循环。每个进程被赋予一个时间片,当时间片用完时,CPU 将切换到下一个进程。这种循 环操作可以通过环形链表来实现。\n- 数据缓冲区:在某些数据缓冲区的实现中,也可能会使用环形链表。比如在音频、视频播放器中,数据 流可能会被分成多个缓冲块并放入一个环形链表,以便实现无缝播放。","x":-1460,"y":111,"width":680,"height":280},
		{"id":"7dc91bffcbf70597","type":"text","text":"“单向链表通常用于实现栈、队列、哈希表和图等数据结构” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=85&annotation=JWQU55H5))\n- 栈与队列:当插入和删除操作都在链表的一端进行时,它表现的特性为先进后出,对应栈;当插入操作在链表的一端进行,删除操作在链表的另一端进行,它表现的特性为先进先出,对应队列。\n- [[02 - HashMap 源码剖析|哈希表]]:链式地址是解决哈希冲突的主流方案之一,在该方案中,所有冲突的元素都会被放到一个链表中。\n- 图:邻接表是表示图的一种常用方式,其中图的每个顶点都与一个链表相关联,链表中的每个元素都代 表与该顶点相连的其他顶点。","x":-1460,"y":-520,"width":680,"height":295},
		{"id":"369363ad74f5dd43","type":"text","text":"“链表的组成单位是节点(node)对象。每个节点都包含两项数据:节点的“值”和指向下一节点的“引用”” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=80&annotation=IKWNUCT9))\n```java\nclass ListNode {  \n\tint val; // 节点值  \n\tListNode next; // 指向下一节点的引用  \n\tListNode(int x) { val = x; } // 构造函数  \n}\n```","x":-180,"y":-464,"width":560,"height":250},
		{"id":"ca5f7e67ea7c9591","type":"text","text":"“想在相邻的两个节点之间插入一个新节点 P , 则只需改变两个节点引用(指针)即可” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=81&annotation=6MINS8FK)) \n```java\np.next = pre.next; \npre.next = p;\n```","x":110,"y":110,"width":380,"height":192},
		{"id":"10b22884b0c50324","type":"text","text":"“在链表中删除节点也非常方便,只需改变一个节点的引用(指针)即可” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=82&annotation=SQYEZL9S)) \n`pre.next = pre.next.next`","x":-160,"y":410,"width":300,"height":140},
		{"id":"fbedc7163a365f45","type":"text","text":"“从头节点出发,逐个向后遍历,直至找到目标节点” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=82&annotation=KWHTSK56))","x":240,"y":420,"width":250,"height":120},
		{"id":"54548cfe4825ebd0","type":"text","text":"“将头节点当作链表的代称” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=81&annotation=KATGH7HD))","x":175,"y":-62,"width":250,"height":60},
		{"id":"a6cdd3e1c21c28c0","type":"text","text":"“建立链表分为两步,第一步是初始化各个节点对象,第二步是构建节点之间的引用关系” ([pdf](zotero://open-pdf/library/items/TELK6EIY?page=80&annotation=XTQCWB6G))","x":-135,"y":-110,"width":250,"height":156}
	],
	"edges":[
		{"id":"5ee642baf32fde07","fromNode":"c35268b6efad58e2","fromSide":"right","toNode":"369363ad74f5dd43","toSide":"left"},
		{"id":"c5efed6efc317862","fromNode":"a6cdd3e1c21c28c0","fromSide":"right","toNode":"54548cfe4825ebd0","toSide":"left"},
		{"id":"f5e74fcbd7b2b3d0","fromNode":"54548cfe4825ebd0","fromSide":"bottom","toNode":"ca5f7e67ea7c9591","toSide":"top"},
		{"id":"cd6d06d2d93f487b","fromNode":"ca5f7e67ea7c9591","fromSide":"left","toNode":"10b22884b0c50324","toSide":"top"},
		{"id":"655599704462d8e5","fromNode":"c35268b6efad58e2","fromSide":"bottom","toNode":"3f666a58c13c48e3","toSide":"top"},
		{"id":"f7351d51a20ded65","fromNode":"c35268b6efad58e2","fromSide":"left","toNode":"7b7cea0e074e4f5e","toSide":"right"},
		{"id":"9c40b438f6d2b5f3","fromNode":"10b22884b0c50324","fromSide":"right","toNode":"fbedc7163a365f45","toSide":"left"},
		{"id":"a683d2a25e44f7a6","fromNode":"c35268b6efad58e2","fromSide":"right","toNode":"a1c276a2ef4de9b1","toSide":"left"}
	]
}